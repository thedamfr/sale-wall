networks:
  salete_net:

volumes:
  pgdata:
  s3data:

services:
  db:
    image: postgres:16-alpine
    container_name: salete_pg
    restart: unless-stopped
    environment:
      POSTGRES_USER: salete
      POSTGRES_PASSWORD: salete
      POSTGRES_DB: salete
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U salete -d salete"]
      interval: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [salete_net]

  s3:
    image: minio/minio:latest
    container_name: salete_s3
    command: server /data --console-address ":9001"
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: salete
      MINIO_ROOT_PASSWORD: salete123
      # pour générer des URL http://s3.localhost:9000/bucket/obj
      MINIO_DOMAIN: s3.localhost
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      retries: 5
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - s3data:/data
    networks: [salete_net]

  server:
    build:
      context: .
      dockerfile: ./Dockerfile      # ↳ basé sur node:24-slim
    container_name: salete_server
    restart: unless-stopped
    env_file: .env.docker                # copie le .example → .env.docker
    environment:
      # valeurs défaut fallback si .env.docker absent
      DATABASE_URL: postgres://salete:salete@db:5432/salete
      S3_ENDPOINT: http://s3:9000
      S3_ACCESS_KEY: salete
      S3_SECRET_KEY: salete123
      S3_BUCKET: salete-media
      NODE_ENV: development
    volumes:
      # hot-reload : monte ton code à l’intérieur du conteneur
      - ./:/app
    depends_on:
      db:
        condition: service_healthy
      s3:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks: [salete_net]
    profiles:
      - production  # Seulement pour production/tests complets